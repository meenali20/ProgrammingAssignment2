makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve will create a function that will recall cached inverse from
## memory if it already exists else it will calculate the inverse by Solve()
## funciton for a new matrix
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
m<-makeCacheMatrix((matrix(1:4),2,2))
m<-makeCacheMatrix(matrix((1:4),2,2))
cacheSolve(m)
n<-makeCacheMatrix(matrix((2:10),3,3))
cacheSolve(n)
n<-makeCacheMatrix(matrix((10:18),3,3))
cacheSolve(n)
n<-makeCacheMatrix(matrix((2,4,5,8,6,4,5,9,7),3,3))
n<-makeCacheMatrix(matrix(c(2,4,5,8,6,4,5,9,7),3,3))
cacheSolve(n)
